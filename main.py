from tkinter import *
from tkinter.messagebox import showerror
from pygame import mixer
from random import uniform
from colorama import init, Fore

BG = 'gray60'

all_progress_bars = []  # –í—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
class ProgressBar:
    def __init__(self, window, bg:str, x:int, y:int, lenght:int, max_value:int) -> None:
        all_progress_bars.append(self)

        max_value += 7  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ (–∞—ç –Ω—É)

        self.window = window
        self.marker_value = 0
        self.value = 0
        self.max_value = max_value
        self.canvas = None

        # 300x200+52+52
        self.canvas = Canvas(window, bg='white', highlightthickness=0)
        self.canvas.place(x=x, y=y, height=20, width=lenght)

        canvas = self.canvas

        canvas.create_rectangle(0, 0, lenght, 20,
                                              fill=bg,
                                              outline='lightgray',
                                              width=4)
        
        self.value_in_pixel = (lenght) / max_value

        self.marker = canvas.create_rectangle(4, 4, 16, 16, fill='purple', width=0)

    def _true_position(self, val):
        return int(self.value_in_pixel * val)
        return val
    
    def _go(self):
        if self._true_position(self.value) < self.marker_value:
            if self._true_position(self.value) < self.marker_value:
                self._move(-1)
                self.marker_value = self.canvas.coords(self.marker)[0]

        elif self._true_position(self.value) > self.marker_value:
            if self._true_position(self.value) > self.marker_value:
                self._move(1)
                self.marker_value = self.canvas.coords(self.marker)[0]
    
    def _move(self, x:int):
        self.canvas.move(self.marker, x, 0)
        self.window.update()
    
    def set_value(self, value:int):
        if value > self.max_value - 7:
            self.value = self.max_value - 7
            return
        else:
            self.value = value
            self._go()

    def update_all(self):
        if self.value > self.max_value - 7:
            self.value = self.max_value - 7
            return
        else:
            for progress_bar in all_progress_bars:
                progress_bar._go()

    def reset(self):
        self.marker_value = 0
        self.set_value(0)
        self.canvas.coords(self.marker, 4, 4, 16, 16)

def centerwindow(win):
    """
    üíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄ —á—Ç
    —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ —Ç–∫–∏–Ω—Ç–µ—Ä
    """
    win.update_idletasks()
    width = win.winfo_width()
    frm_width = win.winfo_rootx() - win.winfo_x()
    win_width = width + 2 * frm_width
    height = win.winfo_height()
    titlebar_height = win.winfo_rooty() - win.winfo_y()
    win_height = height + titlebar_height + frm_width
    x = win.winfo_screenwidth() // 2 - win_width // 2
    y = win.winfo_screenheight() // 2 - win_height // 2
    win.geometry('{}x{}+{}+{}'.format(width, height, x, y))
    win.deiconify()

root = Tk()
root.geometry('400x110')
root.title('–°–∏–º—É–ª—è—Ç–æ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è?')
root['bg'] = BG
root.resizable(False, False)
centerwindow(root)

PLAY_SOUNDS = True

modes = 'davlenie', 'burn'  # –†–µ–∂–∏–º—ã –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
mode = 'davlenie'  # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
last_key = None  # –ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
started = False  # –ó–∞–ø—É—â–µ–Ω –ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å (—Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–Ω–∏–º–∞–ª–∞—Å—å)
running = True   # –ó–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
distance = 0  # –ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
help_actiavted = False  # –ë—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–º–æ—â—å (–ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏)
ticks_showed = False

davlenie_blocked = False  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø–æ–¥–∫–∞—á–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è
burn_reduce_lock = False  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≤–µ—Ä–æ—è–Ω–æ—Å—Ç—å –ø—Ä–æ–±–∏—Ç–∏—è –∫–ª–∞–ø–∞–Ω–∞ —Å–≥–æ—Ä–∞–Ω–∏—è
speed_invisible_lock = False
ready_to_visible_speed = False

mixer.init()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–≤—É–∫–æ–≤

def playsound(sound):  # –ò–≥—Ä–∞–µ—Ç –∑–≤—É–∫–∏
    if not PLAY_SOUNDS:
        return
    
    if sound == 'stop':
        mixer.music.fadeout(5000)
        return
    
    mixer.music.load(f"{sound}.mp3")
    mixer.music.play(loops=0, fade_ms=200)
 
# 2 –¥–∞–≤–ª–µ–Ω–∏—è = 1 —Å–≥–æ—Ä–∞–Ω–∏–µ
# 2 —Å–≥–æ—Ä–∞–Ω–∏—è = 1 —Å–∫–æ—Ä–æ—Å—Ç—å -> 4 –¥–∞–≤–ª–µ–Ω–∏—è = 1 —Å–∫–æ—Ä–æ—Å—Ç—å
def increase_davlenie():  # –£–≤–µ–ª–∏—á–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    if not davlenie_blocked:
        davlenie = davlenie_progress.value
        davlenie_progress.set_value(davlenie + 2)  # –ù–∞–∫–∞—á–∏–≤–∞–µ–º –ø–æ 2 –¥–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑

def increase_burn():  # –£–≤–µ–ª–∏—á–∏—Ç—å —Å–≥–æ—Ä–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    if davlenie_progress.value <= 2:
        return
    
    if burn_progress.max_value-7 <= burn_progress.value:  # –ß—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∫–∞—á–∞—Ç—å –≤—ã—à–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
        return
    burn = burn_progress.value
    burn_progress.set_value(burn + 1)
    davlenie_progress.value -= 2

def increase_speed():  # –£–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    burn = burn_progress.value
    if burn > 2:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≥–æ—Ä–∞–Ω–∏–µ
        speed = speed_progress.value
        if speed_progress.max_value <= speed:
            return
        speed_progress.value += 1
        burn_progress.value -= 2

def reduce_speed():  # –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
    speed = speed_progress.value
    if speed <= 0:
        lose('–ú–∞—à–∏–Ω–∞ –∑–∞–≥–ª–æ—Ö–ª–∞')  # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º
        return
    speed_progress.set_value(speed-1)

def lose(reason):
    global running, started, last_key, distance
    playsound('death')  # –ò–≥—Ä–∞–µ–º –∑–≤—É–∫ —Å–º–µ—Ä—Ç–∏ –∏–∑ –¥–æ—Ä—Å
    running = False  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
    showerror('–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞', f'–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∞–º–æ–≥—É—Å–æ–≤')
    speed_progress.reset()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
    burn_progress.reset()
    davlenie_progress.reset()
    last_key = 'None'  # –ß—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∞—Å—å –ø–æ–º–æ—â—å
    started = False  # –ì–ª—É—à–∏–º –¥–≤–∏–≥–∞—Ç–µ–ª—å
    distance = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    distance_lbl.configure(text=0)
    root.bind(f'<Shift-KeyRelease>', switch_mode)  # –ë–∏–Ω–¥–∏–º —à–∏—Ñ—Ç

    davlenie_progress.update_all()  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–≤
    playsound('stop')  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Å–º–µ—Ä—Ç–∏ (—Å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º 10 —Å–µ–∫—É–Ω–¥)
    running = True  # –°–Ω–æ–≤–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É


def probability(percent):  # –†–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    return uniform(0, 1) < percent/100
    

def pressed(e=None):  # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    global last_key
    if not (e.keycode == 90 or e.keycode == 88 or e.keycode == 67):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞–∂–∞–ª–∏ z, x –∏–ª–∏ c
        return
    
    if help_actiavted:  # –ï—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
        help1_lbl.destroy()

    if e.keycode == last_key:  # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ —Ç—É –∂–µ –∫–ª–∞–≤–∏—à—É —á—Ç–æ –∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return

    last_key = e.keycode

    if mode == 'davlenie':  # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –¥–∞–≤–ª–µ–Ω–∏—è, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ
        increase_davlenie()
    elif mode == 'burn':  # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–≥–æ—Ä–∞–Ω–∏—è, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ
        increase_burn()

def safe_sleep(ms):  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–∞–π–º–µ—Ä –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    for i in range(ms // ticks_delay):
        run()

def switch_mode(e=None):  # –ú–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –∏–≥—Ä—ã (–î–∞–≤–ª–µ–Ω–∏–µ –∏ –°–∂–∏–≥–∞–Ω–∏–µ)
    global mode
    root.unbind(f'<Shift-KeyRelease>')  # –û—Ç–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ç
    if mode == 'davlenie':  # –ï—Å–ª–∏ –±—ã–ª–æ –¥–∞–≤–ª–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Å—Ç–∞–≤–∏–º —Å–∂–∏–≥–∞–Ω–∏–µ
        mode = 'changing'
        davlenie_lbl.configure(fg=BG)
        burn_lbl.configure(fg='red')  # –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        safe_sleep(1000)
        mode = 'burn'
        burn_lbl.configure(fg='white')
        root.bind(f'<Shift-KeyRelease>', switch_mode)  # –°–Ω–æ–≤–∞ –≤–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ç
        
    else:  # –ò –Ω–∞–æ–±–æ—Ä–æ—Ç
        mode = 'changing'
        davlenie_lbl.configure(fg='red')  # –¢–∞–∫ –∂–µ –∫–∞–∫ –∏ —Å–≤–µ—Ä—Ö—É
        burn_lbl.configure(fg=BG)
        safe_sleep(1000)
        mode = 'davlenie'
        davlenie_lbl.configure(fg='white')
        root.bind(f'<Shift-KeyRelease>', switch_mode)
    
def every_n_tick(n):  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ n-–Ω—ã–π —Ç–∏–∫ (–Ω—É —Ç–∏–ø–æ –∫–∞–∂–¥—ã–π 500-—ã–π –∏ —Ç–¥)
    return ticks % n == 0

def every_n_sec(seconds):  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ —É–∂–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    return ticks % (seconds*1000 / ticks_delay) == 0

def logic():  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞
    global started, distance
    speed = speed_progress.value
    davlenie = davlenie_progress.value
    burn = burn_progress.value

    if speed > 2:
        started = True  # –ï—Å–ª–∏ –ø–æ–µ—Ö–∞–ª–∏, —Ç–æ —Å—á–∏—Ç–∞–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≤–µ–¥—ë–Ω–Ω—ã–º
    
    if every_n_tick(30):  # –ö–∞–∂–¥—ã–µ 30 —Ç–∏–∫–æ–≤ –ø—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å
        increase_speed()

    if every_n_tick(60):  # –ö–∞–∂–¥—ã–µ 60 —Ç–∏–∫–æ–≤ –ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å
        if started:
            reduce_speed()
    
    if every_n_tick(300):  # –ö–∞–∂–¥—ã–µ 300 —Ç–∏–∫–æ–≤ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        distance += 0.1 * speed

        distance *= 10  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç—ã—Ö
        distance = int(distance)
        distance /= 10
        if distance >0:
            distance_lbl.configure(font='Arial 15')
            distance_lbl.configure(text=distance)
    
    if every_n_sec(1):  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Å —à–∞–Ω—Å–æ–º 5% –∏–ª–∏ 12% –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –º–µ–Ω—å—à–µ 10
        global speed_invisible_lock, ready_to_visible_speed
        if probability(5) or (speed < 10 and probability(12)):  # –ü—Ä—è—á–µ–º –º–∞—Ä–∫–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏
            if speed_invisible_lock or ready_to_visible_speed:
                return
            speed_invisible_lock = True
            speed_progress.canvas.itemconfig(speed_progress.marker, fill=BG)
            safe_sleep(700)
            speed_progress.canvas.itemconfig(speed_progress.marker, fill='purple')
            safe_sleep(700)
            speed_progress.canvas.itemconfig(speed_progress.marker, fill=BG)
            ready_to_visible_speed = True

    if every_n_sec(10):  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
        if speed_invisible_lock and ready_to_visible_speed:
            ready_to_visible_speed = False
            speed_progress.canvas.itemconfig(speed_progress.marker, fill='purple')
            safe_sleep(300)
            speed_progress.canvas.itemconfig(speed_progress.marker, fill=BG)
            safe_sleep(300)
            speed_progress.canvas.itemconfig(speed_progress.marker, fill='purple')
            safe_sleep(300)
            speed_invisible_lock = False
            

    if every_n_sec(1):  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Å —à–∞–Ω—Å–æ–º 5% –∏–ª–∏ 12% –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—à–µ 10
        if probability(5) or (speed > 10 and probability(12)):
            global davlenie_blocked
            if davlenie_blocked:  # –ï—Å–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return
            davlenie_progress.set_value(2)  # –°—Ç–∞–≤–∏–º –¥–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –Ω–∞ 2 –µ–¥–∏–Ω–∏—Ü—ã
            davlenie_progress.canvas.itemconfig(davlenie_progress.marker, fill='red')
            davlenie_blocked = True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ
            for i in range(8):  # –ú–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
                safe_sleep(250)
                davlenie_progress.canvas.itemconfig(davlenie_progress.marker, fill='purple')
                safe_sleep(250)
                davlenie_progress.canvas.itemconfig(davlenie_progress.marker, fill='red')
            davlenie_blocked = False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∫–∞—á–∫—É –¥–∞–≤–ª–µ–Ω–∏—è
            davlenie_progress.canvas.itemconfig(davlenie_progress.marker, fill='purple')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–æ–ª —Ü–≤–µ—Ç
    
    if every_n_sec(1):  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Å —à–∞–Ω—Å–æ–º 5% –∏–ª–∏ 12% –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—à–µ 15
        if probability(5) or (speed > 15 and probability(12)):
            global burn_reduce_lock
            if burn_reduce_lock:  # –ï—Å–ª–∏ —É–∂–µ —Å–ø—É—Å–∫–∞–µ—Ç—Å—è
                return
            
            burn_reduce_lock = True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            burn = burn_progress.value
            if burn_progress.value <= 10:  # –ü–æ–Ω–∏–∂–∞–µ–º —Å–≥–æ—Ä–∞–Ω–∏–µ –Ω–∞ 10
                burn_progress.set_value(0)
            else:
                burn_progress.set_value(burn-10)

            burn_progress.canvas.itemconfig(burn_progress.marker, fill='red')
            for i in range(2):  # –ú–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
                safe_sleep(250)
                burn_progress.canvas.itemconfig(burn_progress.marker, fill='purple')
                safe_sleep(250)
                burn_progress.canvas.itemconfig(burn_progress.marker, fill='red')
            burn_progress.canvas.itemconfig(burn_progress.marker, fill='purple')
            burn_reduce_lock = False  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏



    if ticks == 700 and last_key is None:  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ —É–∂–µ 700 —Ç–∏–∫–æ–≤ –∏ –Ω–µ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–æ –∫–ª–∞–≤–∏—à —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        global help_actiavted, help1_lbl
        help_actiavted = True
        help1_lbl = Label(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏\nz, x, c, Shift –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ\n–Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∏ —Ä–∞—Å–∫–ª–∞–¥–∫—É.\n–ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n                       ", justify='left', font='Arial 15', bg=BG)
        help1_lbl.place(x=1, y=5)


davlenie_lbl = Label(text='<', font='Arial 18', bg=BG, fg='white')
davlenie_lbl.place(x=330, y=38)

burn_lbl = Label(text='<', font='Arial 18', bg=BG, fg=BG)  # –î–µ–ª–∞–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ —Ç–∞–∫–æ–π-–∂–µ –∫–∞–∫ –∏ —É —Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –µ—ë –Ω–µ –±—ã–ª–æ –≤–∏–¥–Ω–æ
burn_lbl.place(x=330, y=70)

Label(text="–°–∫–æ—Ä–æ—Å—Ç—å", font=10, bg=BG).place(x=0, y=7)
Label(text="–î–∞–≤–ª–µ–Ω–∏–µ", font=10, bg=BG).place(x=0, y=40)
Label(text="–°–≥–æ—Ä–∞–Ω–∏–µ", font=10, bg=BG).place(x=0, y=73)

distance_lbl = Label(text='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ', bg=BG, font="Arial 8")  # –ü–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —á–∏—Å–ª–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∞–º–æ–≥—É—Å–æ–≤
distance_lbl.place(x=330, y=7)


root.bind(f'<KeyRelease>', pressed)  # –ë–∏–Ω–¥–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à
root.bind(f'<Shift-KeyRelease>', switch_mode)

root.protocol("WM_DELETE_WINDOW", lambda: root.destroy())  # –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–∫–Ω–æ (–≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å while True)

speed_progress = ProgressBar(root, BG, 80, 10, 250, 30)  # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
davlenie_progress = ProgressBar(root, BG, 80, 43, 250, 100)
burn_progress = ProgressBar(root, BG, 80, 75, 250, 100)

# –¢–∏–∫–∏ - –æ—Å–Ω–æ–≤–Ω–∞—è –µ–¥–µ–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏. 1 —Ç–∏–∫ = <ticks_delay> –º–∏–ª–∏—Å–µ–∫—É–Ω–¥
ticks = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–∏—Å—Ç–≤–æ —Ç–∏–∫–æ–≤
ticks_delay = 10
from time import time
def run():  # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
    global ticks
    davlenie_progress.update_all()  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
    logic()  # –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã
    root.update()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    root.after(ticks_delay)  # –ñ–¥—ë–º 1 —Ç–∏–∫ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    ticks += 1  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫
    
init(autoreset=True)
CHECK_TRUE_TICKRATE = False
try:
    if not CHECK_TRUE_TICKRATE:  # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∏–≥—Ä—ã
        while root.winfo_exists():
            if running:
                run()
    else:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–æ–≤
        print(f'{Fore.CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–æ–≤')
        start = time()
        for i in range(1000):
            run()
        print(f'–ò—Å—Ç–∏–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–∏–∫–æ–≤: {Fore.YELLOW}{round(time()-start, 1)}\n{Fore.WHITE}–ó–∞–¥–µ—Ä–∂–∫–∞ —Ç–∏–∫–æ–≤ –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ: {Fore.YELLOW}{ticks_delay}.0')
except Exception as e:
    skipping_exceptions = ('can\'t invoke "winfo" command: application has been destroyed',), ('invalid command name ".!canvas"',),\
                          ('invalid command name ".!canvas2"',), ('invalid command name ".!canvas3"',)
    if not e.args in skipping_exceptions:
        print(f'{Fore.RED}{e.args}')
        