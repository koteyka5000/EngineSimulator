from os import environ

environ[
    "PYGAME_HIDE_SUPPORT_PROMPT"
] = "1"  # –£–±—Ä–∞—Ç—å –≤—ã–≤–æ–¥ –æ—Ç pygame —Ç–∏–ø–∞ "Hello from the pygame community. https://www.pygame.org/contribute.html"

from tkinter import *
from tkinter.messagebox import showerror, showinfo
from pygame import mixer
from random import uniform, choice
from colorama import init, Fore, Style
import json
import datetime
import platform
import os
import sys

'''
–ò–≥—Ä–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å —Ä–µ–∞–ª—å–Ω–æ –±–æ–ª—å—à–æ–π, –ø–æ—ç—Ç–æ–º—É –≤–æ—Ç –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ—ë:

    https://telegra.ph/Tutor-na-EngineSimulator-09-23

'''

BG = "gray60"

all_progress_bars = []  # –í—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã


class ProgressBar:
    def __init__(
        self, window, bg: str, x: int, y: int, lenght: int, max_value: int
    ) -> None:
        all_progress_bars.append(self)

        max_value += 7  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ (–∞—ç –Ω—É)

        self.window = window
        self.marker_value = 0
        self.value = 0
        self.max_value = max_value
        self.canvas = None

        # 300x200+52+52
        self.canvas = Canvas(window, bg="white", highlightthickness=0)
        self.canvas.place(x=x, y=y, height=20, width=lenght)

        canvas = self.canvas

        canvas.create_rectangle(0, 0, lenght, 20, fill=bg, outline="lightgray", width=4)

        self.value_in_pixel = (lenght) / max_value

        self.marker = canvas.create_rectangle(4, 4, 16, 16, fill="purple", width=0)

    def _true_position(self, val):
        return int(self.value_in_pixel * val)
        return val

    def _go(self):
        if self._true_position(self.value) < self.marker_value:
            if self._true_position(self.value) < self.marker_value:
                self._move(-1)
                self.marker_value = self.canvas.coords(self.marker)[0]

        elif self._true_position(self.value) > self.marker_value:
            if self._true_position(self.value) > self.marker_value:
                self._move(1)
                self.marker_value = self.canvas.coords(self.marker)[0]

    def _move(self, x: int):
        self.canvas.move(self.marker, x, 0)
        self.window.update()

    def set_value(self, value: int):
        if value > self.max_value - 7:
            self.value = self.max_value - 7
            return
        else:
            self.value = value
            self._go()

    def update_all(self):
        if self.value > self.max_value - 7:
            self.value = self.max_value - 7
            return
        else:
            for progress_bar in all_progress_bars:
                progress_bar._go()

    def reset(self):
        self.marker_value = 0
        self.set_value(0)
        self.canvas.coords(self.marker, 4, 4, 16, 16)


def centerwindow(win):
    """
    üíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄ —á—Ç
    —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ —Ç–∫–∏–Ω—Ç–µ—Ä
    """
    win.update_idletasks()
    width = win.winfo_width()
    frm_width = win.winfo_rootx() - win.winfo_x()
    win_width = width + 2 * frm_width
    height = win.winfo_height()
    titlebar_height = win.winfo_rooty() - win.winfo_y()
    win_height = height + titlebar_height + frm_width
    x = win.winfo_screenwidth() // 2 - win_width // 2
    y = win.winfo_screenheight() // 2 - win_height // 2
    win.geometry("{}x{}+{}+{}".format(width, height, x, y))
    win.deiconify()


root = Tk()
root.geometry("400x110")
root.title("–°–∏–º—É–ª—è—Ç–æ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è?")
root["bg"] = BG
root.resizable(False, False)
centerwindow(root)

# –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã!
if platform.system() == 'Windows':
    SYSTEM = 'win'
elif platform.system() == 'Darwin':
    SYSTEM = 'ma—Å'


MUTE_ALL_SOUNDS = False
PLAY_BACKGROUND_MUSIC = True
DISABLE_HELP = True


IGNORE_EXCEPTIONS = 0
MODES = "davlenie", "burn"  # –†–µ–∂–∏–º—ã –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
mode = "davlenie"  # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
last_key = None  # –ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
started = False  # –ó–∞–ø—É—â–µ–Ω –ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å (—Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–Ω–∏–º–∞–ª–∞—Å—å)
distance = 0  # –ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
help_actiavted = False  # –ë—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–º–æ—â—å (–ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏)
ticks_showed = False
died = False
running = True

GLOBAL_OVERHEAT_STATES = {1: 'lime', 2: "yellow", 3: 'orange', 4: 'red'}
global_overheat = 1

davlenie_blocked = False  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø–æ–¥–∫–∞—á–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è
burn_reduce_lock = False  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≤–µ—Ä–æ—è–Ω–æ—Å—Ç—å –ø—Ä–æ–±–∏—Ç–∏—è –∫–ª–∞–ø–∞–Ω–∞ —Å–≥–æ—Ä–∞–Ω–∏—è
speed_invisible_lock = False
ready_to_visible_speed = False
overheat = False

checking_tickrate = False

mixer.init()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–≤—É–∫–æ–≤

if IGNORE_EXCEPTIONS:
    sys.stderr = open(os.devnull, "w")

def check_true_tickrate(e=None):
    global running, checking_tickrate
    if checking_tickrate:
        return
    
    checking_tickrate = True
    global_overheat_marker.configure(bg='blue')
    print(f"{Fore.CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–æ–≤")

    for i in range(5):
        global_overheat_marker.configure(bg='cyan')
        safe_sleep(100)
        global_overheat_marker.configure(bg='blue')
        safe_sleep(100)

    start = time()
    running = False

    for i in range(1000):
        run()
    
    print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {Fore.YELLOW}{round((ticks_delay / round(time()-start, 1))*100, 1)}%')
    print(f"–ò—Å—Ç–∏–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–∏–∫–æ–≤: {Fore.YELLOW}{round(time()-start, 1)}")

    running = True

    for i in range(5):
        global_overheat_marker.configure(bg='cyan')
        safe_sleep(100)
        global_overheat_marker.configure(bg='blue')
        safe_sleep(100)
    
    checking_tickrate = False
    set_global_overheat_colour()

def show_no_file_error(file: str):
    print(f"\n\n{Fore.RED}–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {file}")
    print(f'–°–µ–π—á–∞—Å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ {Fore.YELLOW}{os.getcwd()}\\')
    print(f'–û–¥–Ω–∞–∫–æ –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {Style.BRIGHT}{Fore.YELLOW}{__file__[:-7]}')

def playsound(sound, loops=0, fade=200):  # –ò–≥—Ä–∞–µ—Ç –∑–≤—É–∫–∏
    if MUTE_ALL_SOUNDS:
        return

    if sound == "stop":
        mixer.music.fadeout(1000)
        return
    
    try:
        mixer.music.load(f"{sound}.mp3")
        mixer.music.play(loops=loops, fade_ms=fade)
    except:
        show_no_file_error('—Å –º—É–∑—ã–∫–æ–π')


def open_scores(e=None):
    more = Tk()
    more.geometry("400x110")
    more.title("–†–µ–∫–æ—Ä–¥—ã")
    more["bg"] = BG
    more.resizable(False, False)
    centerwindow(more)

    # more.protocol("WM_DELETE_WINDOW", lambda: root.destroy()) # –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

    scores_exists = bool(get_scores())

    def clear_records_file():
        with open('scores.json', 'w') as f:
            json.dump({}, f)

        txt.delete(1.0, END)
        txt.insert(END, '–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')

    def show_delete_btn(e=None):
        del_stat_lbl.destroy()
        b = Button(more, text='–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', bg='gray', activebackground='gray', border=0)
        b.place(x=250, y=75, width=130)
 
        percent_sending = 0  # | –°–¥–µ–ª–∞–Ω–æ —á—Ç–æ–±—ã —Å—á–∏—Ç—ã–≤–∞—Ç—å —É–¥–µ—Ä–∂–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        null = False         # |
        percent_sending_lbl = Label(more, bg=BG)

        def update_clock(e=None):
            percent_sending_lbl.place(x=250, y=54)
            percent_sending_lbl.configure(fg='black')
            nonlocal percent_sending, null
            null = False
            for i in range(100):
                if null:
                    break
                percent_sending += 1
                percent_sending_lbl.configure(text=f'{percent_sending}%')
                more.after(40)
                more.update()
                if percent_sending == 100:
                    clear_records_file()
    
        def stop_clock(e=None):
            nonlocal percent_sending, null
            null = True
            percent_sending = 0
            percent_sending_lbl.configure(fg=BG)

        b.bind('<ButtonPress-1>', update_clock)
        b.bind('<ButtonRelease-1>', stop_clock)

    def sort_date():
        if scores_exists:
            txt.delete(1.0, END)
            for date, score in get_scores().items():
                txt.insert(END, f'[{date}]: {score}\n')
        date_btn.configure(fg='cyan')
        record_btn.configure(fg='black')
        record_btn.configure(activeforeground='black')
        date_btn.configure(activeforeground='cyan')

    def sort_record():
        if scores_exists:
            txt.delete(1.0, END)
            for date, score in sorted_record_scores.items():
                txt.insert(END, f'[{date}]: {score}\n')
        date_btn.configure(fg='black')
        record_btn.configure(fg='cyan')
        record_btn.configure(activeforeground='cyan')
        date_btn.configure(activeforeground='black')

    more.bind(f"<Shift-KeyRelease>", show_delete_btn)
    del_stat_lbl = Label(more, text='–ù–∞–∂–º–∏ Shift –¥–ª—è\n—É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', bg=BG, fg='lightgray')
    del_stat_lbl.place(x=254, y=65)

    Label(more, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", bg=BG, font='Arial 15').place(x=250, y=2)
    date_btn = Button(more, text='–î–∞—Ç–∞', bg=BG, command=sort_date, border=0, activebackground=BG)
    date_btn.place(x=253, y=35, width=55, height=25)
    record_btn = Button(more, text='–†–µ–∫–æ—Ä–¥', bg=BG, command=sort_record, border=0, fg='cyan', activebackground=BG, activeforeground='cyan')
    record_btn.place(x=320, y=35, width=55, height=25)

    txt = Text(more, bg='lightgray', fg='purple')
    txt.place(x=5, y=5, width=230, height=100)

    if scores_exists:
        sorted_record_scores = {k: v for k, v in sorted(get_scores().items(), key=lambda item: item[1], reverse=True)}  # üíÄüíÄüíÄ StackOverflow
        for date, score in sorted_record_scores.items():
            txt.insert(END, f'[{date}]: {score}\n')
    else:
        no_records_texts = (
            '–¢–≤–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å!',
            '–¢—É—Ç –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç—É —Ä–µ–∫–æ—Ä–¥–æ–≤,\n–Ω–æ –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤—è—Ç—Å—è!',
            '–°—ã–≥—Ä–∞–π —Ö–æ—Ç—è-–±—ã 1 —Ä–∞–∑ –∏ —Ç—É—Ç\n–±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            "–°–º–æ–∂–µ—à—å –¥–æ–µ—Ö–∞—Ç—å –¥–æ 30\n–∞–º–æ–≥—É—Å–æ–≤? –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç\n—Ç—É—Ç"
        )
        txt.insert(END, choice(no_records_texts))

def set_global_overheat_colour():
    if checking_tickrate:
        return
    try:
        global_overheat_marker.configure(bg=GLOBAL_OVERHEAT_STATES[global_overheat])
    except Exception:
        ...

def increase_global_overheat():
    if not started:
        return
    global global_overheat
    global_overheat += 1
    if global_overheat > len(GLOBAL_OVERHEAT_STATES):
        lose("–ü–µ—Ä–µ–≥—Ä–µ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª—è")
        return
    set_global_overheat_colour()

def reduce_global_overheat():
    global davlenie_blocked
    davlenie_blocked = True
    davlenie_progress.canvas.itemconfig(speed_progress.marker, fill="red")
    global_overheat_marker.configure(bg='purple')
    safe_sleep(2000)

    global global_overheat
    if global_overheat >= 2:
        global_overheat -= 1
    set_global_overheat_colour()

    davlenie_progress.canvas.itemconfig(speed_progress.marker, fill="purple")
    davlenie_blocked = False



# 2 –¥–∞–≤–ª–µ–Ω–∏—è = 1 —Å–≥–æ—Ä–∞–Ω–∏–µ
# 2 —Å–≥–æ—Ä–∞–Ω–∏—è = 1 —Å–∫–æ—Ä–æ—Å—Ç—å -> 4 –¥–∞–≤–ª–µ–Ω–∏—è = 1 —Å–∫–æ—Ä–æ—Å—Ç—å
def increase_davlenie():  # –£–≤–µ–ª–∏—á–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    if not davlenie_blocked:
        davlenie = davlenie_progress.value
        if overheat:
            davlenie_progress.set_value(
                davlenie + 1
            )  # –ï—Å–ª–∏ –ø–µ—Ä–µ–≥—Ä–µ–≤, —Ç–æ –Ω–∞–∫–∞—á–∏–≤–∞–µ–º –ø–æ 1 –¥–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑
        else:
            davlenie_progress.set_value(davlenie + 2)  # –ù–∞–∫–∞—á–∏–≤–∞–µ–º –ø–æ 2 –¥–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑


def increase_burn():  # –£–≤–µ–ª–∏—á–∏—Ç—å —Å–≥–æ—Ä–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    if davlenie_progress.value <= 2:
        return

    if (
        burn_progress.max_value - 7 <= burn_progress.value
    ):  # –ß—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∫–∞—á–∞—Ç—å –≤—ã—à–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
        return
    burn = burn_progress.value
    burn_progress.set_value(burn + 1)
    davlenie_progress.value -= 2


def increase_speed():  # –£–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    burn = burn_progress.value
    if burn > 2:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≥–æ—Ä–∞–Ω–∏–µ
        speed = speed_progress.value
        if speed_progress.max_value <= speed:
            return
        speed_progress.value += 1
        burn_progress.value -= 2


def reduce_speed():  # –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
    speed = speed_progress.value
    if speed <= 0:
        lose('–ú–∞—à–∏–Ω–∞ –∑–∞–≥–ª–æ—Ö–ª–∞')  # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º
        return
    speed_progress.set_value(speed - 1)


def get_scores() -> dict:
    try:
        with open("scores.json", "r") as f:
            records = json.load(f)
            return records
    except Exception:
        show_no_file_error('—Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π')


def check_if_new_record(distance):
    scores:dict = get_scores()
    for date, score in scores.items():
        now = datetime.datetime.now()
        time_now = now.strftime("%d.%m.%Y %H:%M:%S")
        if date == time_now:
            return max(scores.values()) == score

def add_score(score):
    with open("scores.json", "r") as f:
        records: dict = json.load(f)

    with open("scores.json", "w+") as f:
        now = datetime.datetime.now()
        time = now.strftime("%d.%m.%Y %H:%M:%S")
        records[time] = score
        json.dump(records, f)


def lose(reason):
    global started, last_key, distance, died, global_overheat
    if died:
        return
    died = True
    playsound("death")  # –ò–≥—Ä–∞–µ–º –∑–≤—É–∫ —Å–º–µ—Ä—Ç–∏ –∏–∑ –¥–æ—Ä—Å
    add_score(distance)

    def continue_game(e=None):
        global started, last_key, distance, died, global_overheat
        press_space_to_continue_lbl.destroy()
        loading_lbl = Label(root, text='–∑–∞–≥—Ä—É–∑–∫–∞', bg=BG, fg='lightgray')  #TODO
        loading_lbl.place(x=165, y=90)
        root.update()

        death_lbl.destroy()
        speed_progress.reset()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
        burn_progress.reset()
        davlenie_progress.reset()
        last_key = "None"  # –ß—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∞—Å—å –ø–æ–º–æ—â—å
        started = False  # –ì–ª—É—à–∏–º –¥–≤–∏–≥–∞—Ç–µ–ª—å
        distance = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
        global_overheat = 1
        set_global_overheat_colour()
        distance_lbl.configure(font="Arial 15")
        distance_lbl.configure(text=0)
        root.bind(f"<Shift-KeyRelease>", switch_mode)  # –ë–∏–Ω–¥–∏–º —à–∏—Ñ—Ç
        loading_lbl.destroy()
        davlenie_progress.update_all()  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–≤
        playsound("stop")  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ —Å–º–µ—Ä—Ç–∏ (—Å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º)
        playsound("bg1", 10, 5000)
        root.unbind('<space>')
        
        died = False


    if check_if_new_record(distance):
        # showinfo(
        # "–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!", f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! {distance} –∞–º–æ–≥—É—Å–æ–≤"
        # )
        death_lbl = Label(root, text=f'           –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: {distance} –∞–º–æ–≥—É—Å–æ–≤                \n           {reason}\n\n\n\n\n\n\n', justify='left', font='Arial 15', bg=BG)
        death_lbl.place(x=1, y=5)
    else:
        # showerror(
        #     "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞", f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∞–º–æ–≥—É—Å–æ–≤"
        # )

        death_lbl = Label(root, text=f'   –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∞–º–æ–≥—É—Å–æ–≤      \n   {reason}\n\n\n\n\n\n\n', justify='left', font='Arial 15', bg=BG, width=38)
        death_lbl.place(x=0, y=5)
    
    press_space_to_continue_lbl = Label(root, text="–Ω–∞–∂–º–∏ –ø—Ä–æ–±–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", bg=BG, fg='lightgray')
    press_space_to_continue_lbl.place(x=100, y=90)
    root.bind('<space>', continue_game)


def probability(percent):  # –†–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    return uniform(0, 1) < percent / 100


def pressed(e=None):  # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    global last_key
    if SYSTEM == "win":
        if not (
            e.keycode == 90 or e.keycode == 88 or e.keycode == 67 or e.keycode == 86
        ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞–∂–∞–ª–∏ z, x, c –∏–ª–∏ v
            return
    elif SYSTEM == "mac":
        if not (
            e.keycode == 100663418
            or e.keycode == 117440632
            or e.keycode == 134217827
            or e.keycode == 100664399
            or e.keycode == 117441607
            or e.keycode == 134218817
            or e.keycode == 150995062
            or e.keycode == 150996028
        ):
            return
        
    if e.keycode == 86 or e.keycode == 150995062 or e.keycode == 150996028:
        reduce_global_overheat()
        return

    if help_actiavted:  # –ï—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
        help1_lbl.destroy()

    if (
        e.keycode == last_key
    ):  # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ —Ç—É –∂–µ –∫–ª–∞–≤–∏—à—É —á—Ç–æ –∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return

    last_key = e.keycode

    if mode == "davlenie":  # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –¥–∞–≤–ª–µ–Ω–∏—è, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ
        increase_davlenie()
    elif mode == "burn":  # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–≥–æ—Ä–∞–Ω–∏—è, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ
        increase_burn()


def safe_sleep(ms):  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–∞–π–º–µ—Ä –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    for i in range(ms // ticks_delay):
        run()


def switch_mode(e=None):  # –ú–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –∏–≥—Ä—ã (–î–∞–≤–ª–µ–Ω–∏–µ –∏ –°–∂–∏–≥–∞–Ω–∏–µ)
    global mode
    root.unbind(f"<Shift-KeyRelease>")  # –û—Ç–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ç
    if mode == "davlenie":  # –ï—Å–ª–∏ –±—ã–ª–æ –¥–∞–≤–ª–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Å—Ç–∞–≤–∏–º —Å–∂–∏–≥–∞–Ω–∏–µ
        mode = "changing"
        davlenie_lbl.configure(fg=BG)
        burn_lbl.configure(
            fg="red"
        )  # –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        safe_sleep(1000)
        mode = "burn"
        burn_lbl.configure(fg="white")
        root.bind(f"<Shift-KeyRelease>", switch_mode)  # –°–Ω–æ–≤–∞ –≤–∫–ª—é—á–∞–µ–º —à–∏—Ñ—Ç

    else:  # –ò –Ω–∞–æ–±–æ—Ä–æ—Ç
        mode = "changing"
        davlenie_lbl.configure(fg="red")  # –¢–∞–∫ –∂–µ –∫–∞–∫ –∏ —Å–≤–µ—Ä—Ö—É
        burn_lbl.configure(fg=BG)
        safe_sleep(1000)
        mode = "davlenie"
        davlenie_lbl.configure(fg="white")
        root.bind(f"<Shift-KeyRelease>", switch_mode)


def every_n_tick(n):  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ n-–Ω—ã–π —Ç–∏–∫ (–Ω—É —Ç–∏–ø–æ –∫–∞–∂–¥—ã–π 500-—ã–π –∏ —Ç–¥)
    return ticks % n == 0


def every_n_sec(seconds):  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ —É–∂–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    if ticks_delay == 0:
        return ticks % seconds * 1000
    return ticks % (seconds * 1000 / ticks_delay) == 0


def logic():  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞
    global started, distance
    speed = speed_progress.value
    davlenie = davlenie_progress.value
    burn = burn_progress.value

    if speed > 0:
        started = True  # –ï—Å–ª–∏ –ø–æ–µ—Ö–∞–ª–∏, —Ç–æ —Å—á–∏—Ç–∞–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≤–µ–¥—ë–Ω–Ω—ã–º

    # –ö–∞–∂–¥—ã–µ 30 —Ç–∏–∫–æ–≤ –ø—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å
    if every_n_tick(30):
        increase_speed()

    # –ö–∞–∂–¥—ã–µ 60 —Ç–∏–∫–æ–≤ –ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å
    if every_n_tick(60):
        if started:
            reduce_speed()

    # –ö–∞–∂–¥—ã–µ 300 —Ç–∏–∫–æ–≤ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
    if every_n_tick(300):
        distance += 0.1 * speed

        distance *= 10  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç—ã—Ö
        distance = int(distance)
        distance /= 10
        if distance > 0:
            distance_lbl.configure(font="Arial 15")
            distance_lbl.configure(text=distance)

    # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Å —à–∞–Ω—Å–æ–º 5% –∏–ª–∏ 7% –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –º–µ–Ω—å—à–µ 10
    if every_n_sec(1):
        global speed_invisible_lock, ready_to_visible_speed
        if probability(5) or (speed < 10 and probability(7)):  # –ü—Ä—è—á–µ–º –º–∞—Ä–∫–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏
            if speed_invisible_lock or ready_to_visible_speed:
                return
            speed_invisible_lock = True
            speed_progress.canvas.itemconfig(speed_progress.marker, fill=BG)
            safe_sleep(700)
            speed_progress.canvas.itemconfig(speed_progress.marker, fill="purple")
            safe_sleep(700)
            speed_progress.canvas.itemconfig(speed_progress.marker, fill=BG)
            ready_to_visible_speed = True

    # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
    if every_n_sec(10):
        if speed_invisible_lock and ready_to_visible_speed:
            ready_to_visible_speed = False
            speed_progress.canvas.itemconfig(speed_progress.marker, fill="purple")
            safe_sleep(300)
            speed_progress.canvas.itemconfig(speed_progress.marker, fill=BG)
            safe_sleep(300)
            speed_progress.canvas.itemconfig(speed_progress.marker, fill="purple")
            safe_sleep(300)
            speed_invisible_lock = False

    # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Å —à–∞–Ω—Å–æ–º 5% –∏–ª–∏ 12% –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—à–µ 10
    if every_n_sec(1):
        if probability(5) or (speed > 10 and probability(12)):
            global davlenie_blocked
            if davlenie_blocked:  # –ï—Å–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return
            davlenie_progress.set_value(2)  # –°—Ç–∞–≤–∏–º –¥–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –Ω–∞ 2 –µ–¥–∏–Ω–∏—Ü—ã
            davlenie_progress.canvas.itemconfig(davlenie_progress.marker, fill="red")
            davlenie_blocked = True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ
            for i in range(8):  # –ú–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
                safe_sleep(250)
                davlenie_progress.canvas.itemconfig(
                    davlenie_progress.marker, fill="purple"
                )
                safe_sleep(250)
                davlenie_progress.canvas.itemconfig(
                    davlenie_progress.marker, fill="red"
                )
            davlenie_blocked = False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∫–∞—á–∫—É –¥–∞–≤–ª–µ–Ω–∏—è
            davlenie_progress.canvas.itemconfig(
                davlenie_progress.marker, fill="purple"
            )  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–æ–ª —Ü–≤–µ—Ç

    # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Å —à–∞–Ω—Å–æ–º 5% –∏–ª–∏ 12% –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—à–µ 15
    if every_n_sec(1):
        if probability(5) or (speed > 15 and probability(12)):
            global burn_reduce_lock
            if burn_reduce_lock:  # –ï—Å–ª–∏ —É–∂–µ —Å–ø—É—Å–∫–∞–µ—Ç—Å—è
                return

            burn_reduce_lock = True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            burn = burn_progress.value
            if burn_progress.value <= 10:  # –ü–æ–Ω–∏–∂–∞–µ–º —Å–≥–æ—Ä–∞–Ω–∏–µ –Ω–∞ 10
                burn_progress.set_value(0)
            else:
                burn_progress.set_value(burn - 10)

            burn_progress.canvas.itemconfig(burn_progress.marker, fill="red")
            for i in range(2):  # –ú–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
                safe_sleep(250)
                burn_progress.canvas.itemconfig(burn_progress.marker, fill="purple")
                safe_sleep(250)
                burn_progress.canvas.itemconfig(burn_progress.marker, fill="red")
            burn_progress.canvas.itemconfig(burn_progress.marker, fill="purple")
            burn_reduce_lock = False  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏

    # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —Å —à–∞–Ω—Å–æ–º 3% –∏–ª–∏ 7% –µ—Å–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ 30 –∏–ª–∏ 10% –µ—Å–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ 70
    if every_n_sec(1):
        if (
            probability(3)
            or (davlenie > 30 and probability(7))
            or (davlenie > 70 and probability(10))
        ):
            global overheat
            if overheat:
                return

            overheat = True
            davlenie_progress.canvas.itemconfig(davlenie_progress.marker, fill="orange")

    if every_n_sec(1):
        if probability(10):
            increase_global_overheat()

    # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤—ã–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–≥—Ä–µ–≤, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if every_n_sec(10):
        if overheat:
            overheat = False
            davlenie_progress.canvas.itemconfig(davlenie_progress.marker, fill="purple")

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ —É–∂–µ 700 —Ç–∏–∫–æ–≤ –∏ –Ω–µ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–æ –∫–ª–∞–≤–∏—à —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
    if ticks == 700 and last_key is None:
        if DISABLE_HELP:
            return
        global help_actiavted, help1_lbl
        help_actiavted = True
        help1_lbl = Label(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏\nz, x, c, Shift –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n–ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞!\n",
            justify="left",
            font="Arial 15",
            bg=BG,
        )
        help1_lbl.place(x=1, y=5)

global_overheat_marker = Canvas(root, bg=GLOBAL_OVERHEAT_STATES[1], highlightthickness=0)
global_overheat_marker.place(x=384, y=95, width=12, height=12)

davlenie_lbl = Label(text="<", font="Arial 18", bg=BG, fg="white")
davlenie_lbl.place(x=330, y=38)

burn_lbl = Label(
    text="<", font="Arial 18", bg=BG, fg=BG
)  # –î–µ–ª–∞–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ —Ç–∞–∫–æ–π-–∂–µ –∫–∞–∫ –∏ —É —Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –µ—ë –Ω–µ –±—ã–ª–æ –≤–∏–¥–Ω–æ
burn_lbl.place(x=330, y=70)

Label(text="–°–∫–æ—Ä–æ—Å—Ç—å", font=10, bg=BG).place(x=0, y=7)
Label(text="–î–∞–≤–ª–µ–Ω–∏–µ", font=10, bg=BG).place(x=0, y=40)
Label(text="–°–≥–æ—Ä–∞–Ω–∏–µ", font=10, bg=BG).place(x=0, y=73)

distance_lbl = Label(
    text="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ", bg=BG, font="Arial 8"
)  # –ü–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —á–∏—Å–ª–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∞–º–æ–≥—É—Å–æ–≤
distance_lbl.place(x=330, y=7)

root.bind('q', open_scores)
root.bind(f"<KeyRelease>", pressed)  # –ë–∏–Ω–¥–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à
root.bind(f"<Shift-KeyRelease>", switch_mode)
root.bind('ttt', check_true_tickrate)

def on_closing():
    global ticks_delay
    ticks_delay = 0
    root.destroy()

root.protocol(
    "WM_DELETE_WINDOW", on_closing
)  # –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–∫–Ω–æ (–≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å while True)

speed_progress = ProgressBar(root, BG, 80, 10, 250, 30)  # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
davlenie_progress = ProgressBar(root, BG, 80, 43, 250, 100)
burn_progress = ProgressBar(root, BG, 80, 75, 250, 100)

# –¢–∏–∫–∏ - –æ—Å–Ω–æ–≤–Ω–∞—è –µ–¥–µ–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏. 1 —Ç–∏–∫ = <ticks_delay> –º–∏–ª–∏—Å–µ–∫—É–Ω–¥
ticks = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–∏—Å—Ç–≤–æ —Ç–∏–∫–æ–≤
ticks_delay = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10
from time import time


def run():  # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
    global ticks
    davlenie_progress.update_all()  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
    logic()  # –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã
    root.update()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    root.after(ticks_delay)  # –ñ–¥—ë–º 1 —Ç–∏–∫ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    ticks += 1  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫


init(autoreset=True)
try:
    if PLAY_BACKGROUND_MUSIC:
        playsound("bg1", 10, 5000)
    while root.winfo_exists():
        if running:
            run()

except Exception as e:
    if not IGNORE_EXCEPTIONS:
        skipping_exceptions = (
            ('can\'t invoke "winfo" command: application has been destroyed',),
            ('invalid command name ".!canvas"',),
            ('invalid command name ".!canvas2"',),
            ('invalid command name ".!canvas3"',),
        )
        if not e.args in skipping_exceptions:
            print(f"{Fore.RED}{e}")
